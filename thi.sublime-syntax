%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - thi
scope: source.thi

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: singleline_comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: function_def
    - include: numbers
    - include: hex
    - include: strings
    - include: character_literal
    - include: basic_types
    - include: operators

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(interface|enum|struct|class|def|sizeof|typeof|fallthrough|in|true|false|extern|link|union|is|load|if|else|for|while|return|break|continue|defer)\b'
      scope: keyword.control

  function_def:
    - match: '\b(fopen|freopen|fclose|remove|rename|feof|ferror|fflush|clearerr|fseek|ftell|rewind|fread|fwrite|fgetc|getc|getchar|ungetc|fputc|putc|putchar|fgets|fputs|puts|printf|fprintf|sprintf|snprintf|scanf|fscanf|sscanf|perror|atoi|atol|atoll|atof|strtof|strtod|strtold|strtol|strtoul|strtoll|strtoull|rand|srand|malloc|calloc|realloc|free|aligned_alloc|abort|exit|_Exit|quick_exit|getenv|system|abs|labs|llabs|strlen|getFloat|main|change)\b'
      scope: entity.name.function

  numbers:
    - match: '[+-]?[0-9_]+(e[0-9]+)?([lL|LL|uU])*'
      scope: constant.numeric.integer.decimal.thi
    - match: '[+-]?[0-9_]+.+(e[0-9.]+)?([fF])*'
      scope: constant.numeric.float.decimal.thi

  hex:
    - match: '\b0x(-)?[0-9A-Za-z]+\b'
      scope: constant.numeric

  operators:
    - match: '[\.!:=+-?;{},-><&*$\[\]]+'
      scope: keyword.operator

  basic_types:
    - match: '\b(void|u8|s64|f64|s8|s16|s32|u16|u32|u64|f32|Parser|Lexer|v2)\b'
      scope: storage.type

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: "\""
      scope: punctuation.definition.string.begin.example-c
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  character_literal:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: ''''
      scope: punctuation.definition.string.begin.example-c
      push: inside_character_literal

  inside_character_literal:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example
    - match: '\.'
      scope: constant.character.escape.example
    - match: ''''
      scope: punctuation.definition.string.end.example
      pop: true

  singleline_comments:
    # Comments begin with a '#' and finish at the end of the line.
    - match: '#'
      scope: comment.line.double-slash
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash
        - match: $\w?
          pop: true

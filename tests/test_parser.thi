# Dependencies:
#   function name mangling
#   struct methods

struct Parser
    
    lexer := Lexer()

    curr := Token()
    prev := Token()
    next := Token()

    eat()
        prev = curr
        curr = next
        next = lexer.getToken()

    eat(kind: TokenKind)
        if curr.kind != kind error("expected % got %", kind.str(), curr.kind.str())
        eat()

    sameLine() return prev.line == curr.line
    nextSameLine() return curr.line == next.line
    isCurr(kind: TokenKind) return curr.kind == kind
    isNext(kind: TokenKind) return next.kind == kind

    generateAST()
        ast := makeList()
        while !isCurr(.eof)
            stmt := parseStatement()
            if stmt ast.append(stmt)
        return ast

    parsePrimary()
        if curr.kind
            is .True return parseTrue()
            is .False return parseFalse()
            is .Sizeof return parseSizeof()
            is .Cast return parseCast()
            is .Identifier return parseIdentifier()
            is .DollarSign return parseNote()
            is .Float return parseFloat()
            is .Char return parseChar()
            is .Hex return parseHex()
            is .Integer return parseInt()
            is .String return parseString()
            is .OpenParen return parseParen()
        else error("Invalid primary token '%s'", curr.str())
        return nil

main()
    return 1

# Dependencies:
#   function name mangling
#   struct methods

def main(argc int, argc char**)
    parser Parser
    return 1

def compile(source)
    tokens = makeTokens(source)
    ast    = makeAST(tokens)
    code   = makeX64(aast)
    return code

type Parser

    lexer = Lexer()

    curr = Token()
    prev = Token()
    next = Token()

    add = (x) => x

    def eat()
        prev = curr
        curr = next
        next = lexer.getToken()

    def eat(kind)
        if curr.kind != kind error("expected % got %", kind.str(), curr.kind.str())
        eat()

    def sameLine() => prev.line == curr.line
    def nextSameLine() => curr.line == next.line
    def isCurr(kind) => curr.kind == kind
    def isNext(kind) => next.kind == kind

    def generateAST()
        eat()
        ast = []
        while !isCurr(.EOF)
            stmt = parseStatement()
            ast += stmt
        return ast

    def parsePrimary()
        if curr.kind
            is .True => parseTrue()
            is .False => parseFalse()
            is .Sizeof => parseSizeof()
            is .Cast => parseCast()
            is .Identifier => parseIdentifier()
            is .DollarSign => parseNote()
            is .Float => parseFloat()
            is .Char => parseChar()
            is .Hex => parseHex()
            is .Integer => parseInt()
            is .String => parseString()
            is .OpenParen => parseParen()
        else error("Invalid primary token '%s'", curr.str())

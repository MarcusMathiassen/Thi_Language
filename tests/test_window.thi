load "includes/cstdio"
load "includes/cstdlib"
load "includes/opengl"
load "includes/glew"
load "includes/glfw"
load "includes/cmath"

def main() int

    WINDOW_TITLE = "Hello Triangle"

    if !glfwInit() { puts("GLFW init failed.") }
    defer { glfwTerminate() }
    defer { puts("Closing..") }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1)

    window = glfwCreateWindow(640, 480, WINDOW_TITLE, NULL, NULL)
    glfwMakeContextCurrent(window)

    if glewInit() != GLEW_OK { puts("GLEW init failed.") }


    r = 0.01
    g = 0.01
    b = 0.01
    a = 1.0

    x = 1.0
    y = 1.0
    scale = 1.0

    running = true
    while running

        # if glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS { r += 0.001 }
        # if glfwGetKey(window, GLFW_KEY_G) == GLFW_PRESS { g += 0.001 }
        # if glfwGetKey(window, GLFW_KEY_B) == GLFW_PRESS { b += 0.001 }
        # if glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS { r -= 0.001 }
        # if glfwGetKey(window, GLFW_KEY_F) == GLFW_PRESS { g -= 0.001 }
        # if glfwGetKey(window, GLFW_KEY_V) == GLFW_PRESS { b -= 0.001 }

        # r = clamp(r, 0.0, 1.0)
        # g = clamp(g, 0.0, 1.0)
        # b = clamp(b, 0.0, 1.0)
        # a = clamp(a, 0.0, 1.0)

        glClearColor(r, g, b, a)

        #printf("rgb(%f, %f, %f, %f)\n", cast(1.0)r, cast(1.0)g, cast(1.0)b, cast(1.0)a)

        # if glfwWindowShouldClose(window) { running = false }
        # if glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS { running = false }

        glClear(GL_COLOR_BUFFER_BIT)
        glfwPollEvents()

        # if glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS { y += 0.1 }
        # if glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS { y -= 0.1 }
        # if glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS { x += 0.1 }
        # if glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS { x -= 0.1 }
        # if glfwGetKey(window, GLFW_KEY_Z) == GLFW_PRESS { scale -= 0.01 }
        # if glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS { scale += 0.01 }

        # drawTriangle(x * 0.01, y * 0.01, scale)

        glfwSwapBuffers(window)

    return 1

def drawTriangle(x f32, y f32, s f32)
    glBegin(GL_TRIANGLES)
    glColor3f(1.0, 0.0, 0.0)
    glVertex2f(x + -0.5 *s, y + -0.5*s )
    glColor3f(0.0, 1.0, 0.0f)
    glVertex2f(x + 0.0*s, y + 0.5*s)
    glColor3f(0.0, 0.0, 1.0)
    glVertex2f(x + 0.5*s, y -0.5*s)
    glEnd()

def clamp(x f32, mi f32, ma f32) f32
    x = x < mi ? mi : x
    x = x > ma ? ma : x
    return x


# Thi Language Grammar

expr  ->  literal | unary | binary | grouping | list<expr, ','> | call
stmt  ->  'def' | 'return' | 'if' | 'for' | 'while' | 'else' 
          | 'load' | 'link' | 'fallthrough' | 'continue' | 'break' | 'enum' | 'in'
          | 'defer' | 'is'

list<X, Y>  ->  a list of 'X' separated by 'Y'

number     ->  any number; binary, decimal or hexadecimal, floating or fixed
                1053
                1.0
                10_000
                0b1111_0000
                0xFFF
                1e3
                1.0e3
                
literal    ->  number | string | 'false' | 'true'
grouping   ->  '(' expr ')'
unary      ->  ( '-' | '!' | '+' | '*' | 'typeof' | 'sizeof') expr
binary     ->  expr operator expr
operator   ->  '==' | '!=' | '<' | '<=' | '>' | '>=' | '+'  | '-'  | '*' | '/'

block   -> '{' list<stmt, '\n'> '}'

cast    ->  (cast(expr) | '(' expr ')') expr

lambda  ->  '(' list<stmt, '\n'> ')' stmt
call    ->  lambda '(' expr ')'

### Examples

## def
    def main() => 1

## Lambda
    () => 1
    (x f32) => x
    (argc s32, argv u8**) { return 0 }

## Call
    print("hello")
    ((x f32) => x) (1.0)

## Cast
    cast(s32) 1.0
    (s32) 1.0
    (Particle*) data
    cast(Particle*) data
